
F410_registers_tim_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000051c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e4  080006ec  000106ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e4  080006e4  000106ec  2**0
                  CONTENTS
  4 .ARM          00000000  080006e4  080006e4  000106ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e4  080006ec  000106ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e8  080006e8  000106e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080006ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080006ec  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001994  00000000  00000000  0001071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062d  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  000127f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c2db  00000000  00000000  000128a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a37  00000000  00000000  0001eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000421f2  00000000  00000000  000205ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000627ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000260  00000000  00000000  00062800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080006cc 	.word	0x080006cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080006cc 	.word	0x080006cc

08000208 <gpio_config>:
*/

#include "gpio.h"

void gpio_config (void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	3. Configure the OUTPUT MODE
	Note: LED connected to PA5
	***************************************/

	//! 1. Enable the GPIO CLOCK
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		// Enable GPIO A Clock
 800020c:	4b10      	ldr	r3, [pc, #64]	; (8000250 <gpio_config+0x48>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a0f      	ldr	r2, [pc, #60]	; (8000250 <gpio_config+0x48>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

	//! 2. Set the Pin as OUTPUT
	GPIOA->MODER |= 1 << GPIO_MODER_MODER5_Pos;	// Set PA5 as General purpose output mode. Bits 10:11 set as (01)
 8000218:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <gpio_config+0x4c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <gpio_config+0x4c>)
 800021e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000222:	6013      	str	r3, [r2, #0]

	//! 3. Configure the OUTPUT MODE
	// GPIOB->OTYPER |= ( 0 << 0 );
	GPIOA->OTYPER |= ( 0 << GPIO_OTYPER_OT5_Pos );	// Push-pull type for pin 5.
 8000224:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <gpio_config+0x4c>)
 8000226:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <gpio_config+0x4c>)
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	6053      	str	r3, [r2, #4]
	//GPIOB->OSPEEDR |= ( 2 << 0 );
	GPIOA->OSPEEDR |= ( 2 << GPIO_OSPEEDR_OSPEED5_Pos );	// High speed setup for pin 0
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <gpio_config+0x4c>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <gpio_config+0x4c>)
 8000232:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000236:	6093      	str	r3, [r2, #8]
	//GPIOB->PUPDR &= ~( ( 1 << 1 ) | ( 1 << 0 ) );
	GPIOA->PUPDR &= ~( 3 << GPIO_PUPDR_PUPD5_Pos );	// 10:11 set as (00) for pin 5 to be no pull up or down
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <gpio_config+0x4c>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a05      	ldr	r2, [pc, #20]	; (8000254 <gpio_config+0x4c>)
 800023e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000242:	60d3      	str	r3, [r2, #12]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800
 8000254:	40020000 	.word	0x40020000

08000258 <led_on>:

void led_on (void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS5;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <led_on+0x1c>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <led_on+0x1c>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6193      	str	r3, [r2, #24]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40020000 	.word	0x40020000

08000278 <led_off>:

void led_off (void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR5;
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <led_off+0x1c>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <led_off+0x1c>)
 8000282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000286:	6193      	str	r3, [r2, #24]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40020000 	.word	0x40020000

08000298 <main>:
#include "main.h"

uint8_t ledState = 0;

int main ( void )
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	system_clock_config ();
 800029c:	f000 f830 	bl	8000300 <system_clock_config>
	// 100Mhz APB1 timer clock is divided by 1000. Timer counter is counting up every 10us
	// Timer is reloaded after 10us * 50k = 500ms
	tim6_config ( 1000, 50000 );
 80002a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80002a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a8:	f000 f944 	bl	8000534 <tim6_config>
	gpio_config ();
 80002ac:	f7ff ffac 	bl	8000208 <gpio_config>

	tim6_enable ( 1 );
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 f99f 	bl	80005f4 <tim6_enable>

	while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0x1e>

080002b8 <TIM6_DAC_IRQHandler>:
	return 0;
}


void TIM6_DAC_IRQHandler ( void )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	if ( TIM6->SR & TIM_SR_UIF )
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <TIM6_DAC_IRQHandler+0x40>)
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d014      	beq.n	80002f2 <TIM6_DAC_IRQHandler+0x3a>
	{
		TIM6->SR &= ~TIM_SR_UIF;
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <TIM6_DAC_IRQHandler+0x40>)
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <TIM6_DAC_IRQHandler+0x40>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6113      	str	r3, [r2, #16]

		if (ledState)
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <TIM6_DAC_IRQHandler+0x44>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d005      	beq.n	80002e8 <TIM6_DAC_IRQHandler+0x30>
		{
			led_off();
 80002dc:	f7ff ffcc 	bl	8000278 <led_off>
			ledState = 0;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <TIM6_DAC_IRQHandler+0x44>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
		{
			led_on();
			ledState = 1;
		}
	}
}
 80002e6:	e004      	b.n	80002f2 <TIM6_DAC_IRQHandler+0x3a>
			led_on();
 80002e8:	f7ff ffb6 	bl	8000258 <led_on>
			ledState = 1;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <TIM6_DAC_IRQHandler+0x44>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40001000 	.word	0x40001000
 80002fc:	2000001c 	.word	0x2000001c

08000300 <system_clock_config>:
5. Configure the MAIN PLL
6. Enable the PLL and wait for it to become ready
7. Select the Clock Source and wait for it to be set
********************************************************/
void system_clock_config(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

	//! 1. ENABLE HSE and wait for the HSE to become Ready
	// RCC->CR |= (1<<16);
	RCC->CR |= RCC_CR_HSION;  					// Set RCC's CR register's 16th bit to 1
 8000304:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <system_clock_config+0xf0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a39      	ldr	r2, [pc, #228]	; (80003f0 <system_clock_config+0xf0>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));
 8000310:	bf00      	nop
 8000312:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <system_clock_config+0xf0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0302 	and.w	r3, r3, #2
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f9      	beq.n	8000312 <system_clock_config+0x12>

	//! 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800031e:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <system_clock_config+0xf0>)
 8000320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000322:	4a33      	ldr	r2, [pc, #204]	; (80003f0 <system_clock_config+0xf0>)
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS;
 800032a:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <system_clock_config+0xf4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a31      	ldr	r2, [pc, #196]	; (80003f4 <system_clock_config+0xf4>)
 8000330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000334:	6013      	str	r3, [r2, #0]

	//! 3. Configure the FLASH PREFETCH and the LATENCY Related Settings
	FLASH->ACR |= FLASH_ACR_DCEN;				// Data cache enable
 8000336:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <system_clock_config+0xf8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a2f      	ldr	r2, [pc, #188]	; (80003f8 <system_clock_config+0xf8>)
 800033c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000340:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_ICEN;				// Instruction cache enable
 8000342:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <system_clock_config+0xf8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a2c      	ldr	r2, [pc, #176]	; (80003f8 <system_clock_config+0xf8>)
 8000348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800034c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTEN;				// Prefetch buffer enable
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <system_clock_config+0xf8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <system_clock_config+0xf8>)
 8000354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000358:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS; 		// Flash latency is 3 wait states
 800035a:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <system_clock_config+0xf8>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <system_clock_config+0xf8>)
 8000360:	f043 0303 	orr.w	r3, r3, #3
 8000364:	6013      	str	r3, [r2, #0]

	//! 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; 			// AHB PS Div 1
 8000366:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <system_clock_config+0xf0>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <system_clock_config+0xf0>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; 			// APB1 PS Div 2
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <system_clock_config+0xf0>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <system_clock_config+0xf0>)
 8000374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000378:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; 			// APB2 PS Div 1
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <system_clock_config+0xf0>)
 800037c:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <system_clock_config+0xf0>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	6093      	str	r3, [r2, #8]

	//! 5. Configure the MAIN PLL
	// PLLM=4	PLLN=100	PLLP=2(!)	PLLQ=3(did not use)		PLLR=2(did not use)
	RCC->PLLCFGR = 0x00000000; 					// Reset the register. Default values prevent us from setting correct values.
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <system_clock_config+0xf0>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
	// RCC->PLLCFGR |= (4<<0) | (100<<6) | (0<<16);	// PLLM 0:5		PLLN 6:14	PLLP 16:17
	RCC->PLLCFGR |= 8 << RCC_PLLCFGR_PLLM_Pos;
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <system_clock_config+0xf0>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <system_clock_config+0xf0>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 100 << RCC_PLLCFGR_PLLN_Pos;
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <system_clock_config+0xf0>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <system_clock_config+0xf0>)
 800039a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800039e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0 << RCC_PLLCFGR_PLLP_Pos;	// Actually it does nothing
 80003a0:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <system_clock_config+0xf0>)
 80003a2:	4a13      	ldr	r2, [pc, #76]	; (80003f0 <system_clock_config+0xf0>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; 	// High speed external clock selected as clock source
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <system_clock_config+0xf0>)
 80003aa:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <system_clock_config+0xf0>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	6053      	str	r3, [r2, #4]

	//! 6. Enable the PLL and wait for it to become ready
	RCC->CR |= RCC_CR_PLLON;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <system_clock_config+0xf0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <system_clock_config+0xf0>)
 80003b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ba:	6013      	str	r3, [r2, #0]
	while ( !( RCC->CR & RCC_CR_PLLRDY ) ); 	// Wait for the PLL to get ready
 80003bc:	bf00      	nop
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <system_clock_config+0xf0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <system_clock_config+0xbe>

	//! 7. Select the Clock Source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <system_clock_config+0xf0>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <system_clock_config+0xf0>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	6093      	str	r3, [r2, #8]
	while ( ( RCC->CFGR & RCC_CFGR_SWS_Msk ) != RCC_CFGR_SWS_PLL );
 80003d6:	bf00      	nop
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <system_clock_config+0xf0>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f003 030c 	and.w	r3, r3, #12
 80003e0:	2b08      	cmp	r3, #8
 80003e2:	d1f9      	bne.n	80003d8 <system_clock_config+0xd8>
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40007000 	.word	0x40007000
 80003f8:	40023c00 	.word	0x40023c00

080003fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <SystemInit+0x20>)
 8000402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <SystemInit+0x20>)
 8000408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800040c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <__NVIC_GetPriorityGrouping+0x18>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	0a1b      	lsrs	r3, r3, #8
 800042a:	f003 0307 	and.w	r3, r3, #7
}
 800042e:	4618      	mov	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	db0b      	blt.n	8000466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	f003 021f 	and.w	r2, r3, #31
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <__NVIC_EnableIRQ+0x38>)
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	095b      	lsrs	r3, r3, #5
 800045c:	2001      	movs	r0, #1
 800045e:	fa00 f202 	lsl.w	r2, r0, r2
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000e100 	.word	0xe000e100

08000478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000488:	2b00      	cmp	r3, #0
 800048a:	db0a      	blt.n	80004a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	b2da      	uxtb	r2, r3
 8000490:	490c      	ldr	r1, [pc, #48]	; (80004c4 <__NVIC_SetPriority+0x4c>)
 8000492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000496:	0112      	lsls	r2, r2, #4
 8000498:	b2d2      	uxtb	r2, r2
 800049a:	440b      	add	r3, r1
 800049c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004a0:	e00a      	b.n	80004b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4908      	ldr	r1, [pc, #32]	; (80004c8 <__NVIC_SetPriority+0x50>)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	3b04      	subs	r3, #4
 80004b0:	0112      	lsls	r2, r2, #4
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	440b      	add	r3, r1
 80004b6:	761a      	strb	r2, [r3, #24]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	e000e100 	.word	0xe000e100
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b089      	sub	sp, #36	; 0x24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	f1c3 0307 	rsb	r3, r3, #7
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	bf28      	it	cs
 80004ea:	2304      	movcs	r3, #4
 80004ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	3304      	adds	r3, #4
 80004f2:	2b06      	cmp	r3, #6
 80004f4:	d902      	bls.n	80004fc <NVIC_EncodePriority+0x30>
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	3b03      	subs	r3, #3
 80004fa:	e000      	b.n	80004fe <NVIC_EncodePriority+0x32>
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	43da      	mvns	r2, r3
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	401a      	ands	r2, r3
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43d9      	mvns	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000524:	4313      	orrs	r3, r2
         );
}
 8000526:	4618      	mov	r0, r3
 8000528:	3724      	adds	r7, #36	; 0x24
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <tim6_config>:
 *  // Now an event occurred but UIF bit is not changed due to state of the URS bit (also interrupts are not enabled)
 *  8. Enable the update interrupt DIER.UIE
 *  9. SET THE NVIC to get callback from interrupt events
 **************************************************************************************/
void tim6_config ( uint16_t psc, uint16_t arr )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	80fb      	strh	r3, [r7, #6]
 8000540:	4613      	mov	r3, r2
 8000542:	80bb      	strh	r3, [r7, #4]
	//! 1. Enable the timer clock source
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <tim6_config+0xb4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <tim6_config+0xb4>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6413      	str	r3, [r2, #64]	; 0x40

	//! 2. Set the prescaler
	TIM6->PSC = psc - 1;
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <tim6_config+0xb8>)
 8000556:	629a      	str	r2, [r3, #40]	; 0x28

	//! 3. Set the auto reload
	TIM6->ARR = arr;
 8000558:	4a24      	ldr	r2, [pc, #144]	; (80005ec <tim6_config+0xb8>)
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	62d3      	str	r3, [r2, #44]	; 0x2c
	//! 4. Set the counter mode
	// TIM6 only offers up-counter

	//! 5. Enable auto reload buffering
	// The content of the preload register is transfered to the shadow register at each update event
	TIM6->CR1 |= TIM_CR1_ARPE;
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <tim6_config+0xb8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a22      	ldr	r2, [pc, #136]	; (80005ec <tim6_config+0xb8>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6013      	str	r3, [r2, #0]

	//! 6. Only counter overflow generate an interrupt
	TIM6->CR1 |= TIM_CR1_URS;
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <tim6_config+0xb8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <tim6_config+0xb8>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6013      	str	r3, [r2, #0]

	//! 7. Transfer the content of the preload registers to buffers
	TIM6->EGR |= TIM_EGR_UG;
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <tim6_config+0xb8>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <tim6_config+0xb8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6153      	str	r3, [r2, #20]

	//! 8. Enable the update interrupt
	TIM6->DIER |= TIM_DIER_UIE;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <tim6_config+0xb8>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <tim6_config+0xb8>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	60d3      	str	r3, [r2, #12]
	TIM6->SR &= ~TIM_SR_UIF;			// Interrupt should not be triggered by now, but we clear it anyways
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <tim6_config+0xb8>)
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <tim6_config+0xb8>)
 8000594:	f023 0301 	bic.w	r3, r3, #1
 8000598:	6113      	str	r3, [r2, #16]

	//! 9. Configure the NVIC to run a callback function when interrupt occur
	/* Set interrupt priority */
	IRQn_Type IRQn = TIM6_DAC_IRQn;
 800059a:	2336      	movs	r3, #54	; 0x36
 800059c:	75fb      	strb	r3, [r7, #23]
	uint32_t prioritygroup = 0x00U;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	uint32_t PreemptPriority = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
	uint32_t SubPriority = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
	prioritygroup = NVIC_GetPriorityGrouping();
 80005aa:	f7ff ff39 	bl	8000420 <__NVIC_GetPriorityGrouping>
 80005ae:	6138      	str	r0, [r7, #16]
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	68f9      	ldr	r1, [r7, #12]
 80005b4:	6938      	ldr	r0, [r7, #16]
 80005b6:	f7ff ff89 	bl	80004cc <NVIC_EncodePriority>
 80005ba:	4602      	mov	r2, r0
 80005bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff58 	bl	8000478 <__NVIC_SetPriority>

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 80005c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff35 	bl	800043c <__NVIC_EnableIRQ>

	//! Optional: Stops the timer when debug is halted
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <tim6_config+0xbc>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <tim6_config+0xbc>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6093      	str	r3, [r2, #8]
}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40001000 	.word	0x40001000
 80005f0:	e0042000 	.word	0xe0042000

080005f4 <tim6_enable>:

void tim6_enable ( uint8_t state )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (state == 0)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d106      	bne.n	8000612 <tim6_enable+0x1e>
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <tim6_enable+0x38>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a08      	ldr	r2, [pc, #32]	; (800062c <tim6_enable+0x38>)
 800060a:	f023 0301 	bic.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]
	else
		TIM6->CR1 |= TIM_CR1_CEN;

	return;
 8000610:	e006      	b.n	8000620 <tim6_enable+0x2c>
		TIM6->CR1 |= TIM_CR1_CEN;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <tim6_enable+0x38>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <tim6_enable+0x38>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]
	return;
 800061e:	bf00      	nop
}
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40001000 	.word	0x40001000

08000630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800064c:	4c0b      	ldr	r4, [pc, #44]	; (800067c <LoopFillZerobss+0x26>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800065a:	f7ff fecf 	bl	80003fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f000 f811 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000662:	f7ff fe19 	bl	8000298 <main>
  bx  lr    
 8000666:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000668:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000674:	080006ec 	.word	0x080006ec
  ldr r2, =_sbss
 8000678:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800067c:	20000020 	.word	0x20000020

08000680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4d0d      	ldr	r5, [pc, #52]	; (80006bc <__libc_init_array+0x38>)
 8000688:	4c0d      	ldr	r4, [pc, #52]	; (80006c0 <__libc_init_array+0x3c>)
 800068a:	1b64      	subs	r4, r4, r5
 800068c:	10a4      	asrs	r4, r4, #2
 800068e:	2600      	movs	r6, #0
 8000690:	42a6      	cmp	r6, r4
 8000692:	d109      	bne.n	80006a8 <__libc_init_array+0x24>
 8000694:	4d0b      	ldr	r5, [pc, #44]	; (80006c4 <__libc_init_array+0x40>)
 8000696:	4c0c      	ldr	r4, [pc, #48]	; (80006c8 <__libc_init_array+0x44>)
 8000698:	f000 f818 	bl	80006cc <_init>
 800069c:	1b64      	subs	r4, r4, r5
 800069e:	10a4      	asrs	r4, r4, #2
 80006a0:	2600      	movs	r6, #0
 80006a2:	42a6      	cmp	r6, r4
 80006a4:	d105      	bne.n	80006b2 <__libc_init_array+0x2e>
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ac:	4798      	blx	r3
 80006ae:	3601      	adds	r6, #1
 80006b0:	e7ee      	b.n	8000690 <__libc_init_array+0xc>
 80006b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b6:	4798      	blx	r3
 80006b8:	3601      	adds	r6, #1
 80006ba:	e7f2      	b.n	80006a2 <__libc_init_array+0x1e>
 80006bc:	080006e4 	.word	0x080006e4
 80006c0:	080006e4 	.word	0x080006e4
 80006c4:	080006e4 	.word	0x080006e4
 80006c8:	080006e8 	.word	0x080006e8

080006cc <_init>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	bf00      	nop
 80006d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d2:	bc08      	pop	{r3}
 80006d4:	469e      	mov	lr, r3
 80006d6:	4770      	bx	lr

080006d8 <_fini>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	bf00      	nop
 80006dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006de:	bc08      	pop	{r3}
 80006e0:	469e      	mov	lr, r3
 80006e2:	4770      	bx	lr
